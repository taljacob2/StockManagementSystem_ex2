# 'schema file generator' every save of a XML file -> write in README

# all the numbers are 'long' numbers ant NOT 'int' numbers -> write in README

#   in the schema file:

    I did: (minimum of 0)
    line 128:
    <xs:element ref="rse-holdings" minOccurs="0"/>

    and Aviad did: (minimum of 1)
    line 15:
    <xs:element ref="rse-holdings"/>




# make command "4" as tree view?
# make command "5" as a table?

# snowHills.jpg --- kill this or use this

# in the StockTablePaneController - tableView --- make `Price` be presented as $USD.

# change 'font' via a slider ->>>> update: change via "Spinner" component.

# Aviad said that the main method should be on the 'javafx' module.
    is it okay to set the main as my MainUI eventhough its on the 'ui' module?

# -> write in README  that Filechooser is having ExtensionFilters to .FXML and ALL
        also, root setInitialDirectory is the current Project directory.

 # -> write in README  that in change of color theme, the label of "RSE" is
        white on dark colors, and black on bright colors.

         # -> write in README  that in change of color theme, the label of "Progress" is
                white on dark colors that are less than 150 total, and Colored on bright colors.

# fix that when using the "Animation" replacement there is an actual replacement.
    because now there is no corrent "remove" of the "oldPane"


# add an "icon" to the ".exe"

# add colors to labels of buttons

# reset the 'statusLabel' when clicking on any button.
    dot it by adding a 'resetLabel' call into every button ActionEvent.


#V make "disable" to the menuVBox as long as there are no stocks in the system.

# fix progressBar is not progressing for some reason now.

# write in README -> that I made 5 types of Animations: available in the
"Settings" Menu.

# order "PaneAnimator" (and "PaneReplacer") that WONT be configured ONLY TO
JavaFXApp via
    JavaFXAppController.setReplaceAblePane(newPane); and
    JavaFXAppController.getReplaceAblePane();

    but needs to be generic!!

    # then, we can configure a "PaneAnimationHandlerJavaFXApp" that "extends"
        "PaneAnimationHandler" with the bond to JavaFX borderPane,
        parentContainer, and replaceAblePane.


# BUG ONLY ON FADE IN OUT ANIMATION - If you "SPAM" the click of PANE buttons,
    there would be panes that won't be removed. - Fix it.

# revision JavaFXApp.css

# show the "OwnProfile" pane when visioning the "OrderExecution" page.

# need to add a func in "Stock" that is "getQuantity(User user)" that
     returns the quanity of this stock in a given user.

# check if there is an option to make the "Spinner" in "OrderExecution.class" to
    be "Editable" without bugs.

# ->>write in README - after picking the second color the RSE-LABEL and the
        PROGRESS-LABEL are set to be the last color


# maybe add to "TableUtils" actions with Consumer

# delete all empty .css files in the end !!!

# ->> Write in README - multiple tables are split by split-pane

    _________________________________________________________________________

        /* XXX - GUIDE: dynamic style:
               https://stackoverflow.com/questions/36159860/javafx-change-style-dynamically-on-pane */


        PseudoClass mouseOver = PseudoClass.getPseudoClass("mouse-over");
        Pane myPane = new Pane();
        myPane.getStyleClass().add("my-pane");
        myPane.setOnMouseEntered(
                e -> myPane.pseudoClassStateChanged(mouseOver, true));
        myPane.setOnMouseExited(
                e -> myPane.pseudoClassStateChanged(mouseOver, false));



_________________________________________________________________________________
CREATING A CALCULTED COLUMN:


private TableColumn balance = new TableColumn("Balance");

        balance.setCellValueFactory(
                new Callback<TableColumn.CellDataFeatures, ObservableValue>() {
                    @Override public ObservableValue call(
                            TableColumn.CellDataFeatures p) {
                        return new ReadOnlyObjectWrapper(p.getValue());
                    }
                });


        /*
         * Note: getItems() is a ObservableList of "Items".
         * Note: "Item" = an Object of a HeightCell in a specific column,
         * ordered from top to bottom.
         */
        balance.setCellFactory(new Callback<TableColumn, TableCell>() {
            @Override public TableCell call(TableColumn p) {
                return new TableCell() {
                    @Override
                    protected void updateItem(Object item, boolean empty) {
                        super.updateItem(item, empty);
                        if ((this.getTableRow() != null) && (item != null)) {
                            int currentRowIndex = this.getTableRow().getIndex();
                            int preRowIndex = currentRowIndex - 1;
                            if (currentRowIndex == 0) {
                                preRowIndex = currentRowIndex;
                            }

                            // Sum Items of Column:
                            Integer totalValue = new Integer(0);
                            for (int i = 0; i <= currentRowIndex; i++) {
                                totalValue = totalValue + (Integer.parseInt(
                                        getTableView().getItems().get(i)
                                                .toString()));
                            }

                            /*
                             * Setting the text of the
                             * current-Item-in-the-column.
                             */
                            setText(String.valueOf(totalValue));
                        } else {
                            setText("");
                        }
                    }
                };
            }
        });


__________________________________________________________________________




